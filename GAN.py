import sys
import matplotlib.pyplot as plt
import numpy as np
import pickle
import glob
from future import print_function, division
from music21 import converter, instrument, note, chord, stream
from keras.layers import Input, Dense, Reshape, Dropout, CuDNNLSTM, Bidirectional, Conv1D, Flatten, MaxPooling1D
from keras.layers import BatchNormalization, Activation, ZeroPadding2D
from keras.layers.advanced_activations import LeakyReLU
from keras.models import Sequential, Model
from keras.optimizers import Adam
from keras.utils import np_utils
%matplotlib inline

def get_notes():
    print("HELLO")
    """ Get all the notes and chords from the midi files """
    notes = []
    with open('./notes_maestro_edit2', 'rb') as filepath:
       notes = pickle.load(filepath)

#     for file in glob.glob("/content/gdrive/My Drive/Classical-Piano-Composer/2017/*.midi"):
#         print("IN")
#         midi = converter.parse(file)

#         print("Parsing %s" % file)

#         notes_to_parse = None

#         try: # file has instrument parts
#             s2 = instrument.partitionByInstrument(midi)
#             notes_to_parse = s2.parts[0].recurse() 
#         except: # file has notes in a flat structure
#             notes_to_parse = midi.flat.notes
            
#         for element in notes_to_parse:
#             if isinstance(element, note.Note):
#                 notes.append(str(element.pitch))
#             elif isinstance(element, chord.Chord):
#                 notes.append('.'.join(str(n) for n in element.normalOrder))
#     with open('/content/gdrive/My Drive/Classical-Piano-Composer/data/notes_maestro_try', 'wb') as filepath:
#         pickle.dump(notes, filepath)       

    return notes

def prepare_sequences(notes, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    # map between notes and integers and back
    pitchnames = sorted(set(item for item in notes))
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    sequence_length = 100
    network_input = []
    output = []
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # reshape the input into a format compatible with LSTM layers
    normalized_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
    # normalize input
    normalized_input = normalized_input / float(n_vocab)
#     print("Network input : ",len(network_input))
#     print("Normalized : ",normalized_input.shape)

    return (network_input, normalized_input)

def generate_notes(model, notes, network_input, n_vocab,start,seq_length):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
#     print(type(network_input))
#     print(network_input)
    pitchnames = sorted(set(item for item in notes))
    
#     start = np.random.randint(0, len(network_input)-1)

    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []
    pattern2 = [int_to_note[i] for i in pattern]

    indices = [x for x in range(n_vocab)]

    # generate 500 notes
    for note_index in range(seq_length):
        prediction_input = np.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)
#         prediction_probs = prediction.flatten()
#         index = np.random.choice(indices,size=1,p = prediction_probs)

        index = np.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)
        
#         pattern = np.append(pattern,index)
        pattern.append(index)
        pattern = pattern[1:len(pattern)]
   
    return prediction_output


def create_midi(prediction_output, filename,bpm):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)
        # increase offset each iteration so that notes do not stack
        offset += 0.5
    
    midi_stream = stream.Stream(output_notes)
    t = tempo.MetronomeMark(number = bpm)
    midi_stream.insert(0,t)

#     midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp='./output.mid')

class GAN():
    def __init__(self, rows):
        self.seq_length = rows
        self.seq_shape = (self.seq_length, 1)
        self.latent_dim = 1000
        self.disc_loss = []
        self.gen_loss =[]
        
        optimizer = Adam(0.0002, 0.5)

        # Build and compile the discriminator
        self.discriminator = self.build_discriminator()
        self.discriminator.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

        # Build the generator
        self.generator = self.build_generator()

        # The generator takes noise as input and generates note sequences
        z = Input(shape=(self.latent_dim,))
        generated_seq = self.generator(z)

        # For the combined model we will only train the generator
        self.discriminator.trainable = False

        # The discriminator takes generated images as input and determines validity
        validity = self.discriminator(generated_seq)

        # The combined model  (stacked generator and discriminator)
        # Trains the generator to fool the discriminator
        self.combined = Model(z, validity)
        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)

    def build_discriminator(self):

        model = Sequential()
        model.add(CuDNNLSTM(512, input_shape=self.seq_shape, return_sequences=True))
        model.add(Bidirectional(CuDNNLSTM(512)))
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(256))
        model.add(LeakyReLU(alpha=0.2))
        model.add(Dense(1, activation='sigmoid'))
        model.summary()

        seq = Input(shape=self.seq_shape)
        validity = model(seq)

        return Model(seq, validity)
      
    def build_generator(self):

        model = Sequential()
#         model.add(CuDNNLSTM(256,input_shape=(self.latent_dim, 1),return_sequences=True))
        model.add(Conv1D(filters = 100,kernel_size=2,strides=1,input_shape = (self.latent_dim,1), padding='valid',kernel_initializer='glorot_uniform', bias_initializer='zeros'))
        model.add(MaxPooling1D(pool_size=2, strides=None, padding='valid', data_format='channels_last'))
        model.add(Flatten())
#         model.add(CuDNNLSTM(256))
        model.add(Dense(256))#, input_dim=self.latent_dim))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(512))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(1024))
        model.add(LeakyReLU(alpha=0.2))
        model.add(BatchNormalization(momentum=0.8))
        model.add(Dense(np.prod(self.seq_shape), activation='tanh'))
        model.add(Reshape(self.seq_shape))
        model.summary()
        
        noise = Input(shape=(self.latent_dim,))
        seq = model(noise)

        return Model(noise, seq)

    def train(self, epochs, batch_size=128, sample_interval=50):

        # Load and convert the data
        notes = get_notes()
        n_vocab = len(set(notes))
        X_train, y_train = prepare_sequences(notes, n_vocab)

        # Adversarial ground truths
        real = np.ones((batch_size, 1))
        fake = np.zeros((batch_size, 1))
        
        # Training the model
        for epoch in range(epochs):

            # Training the discriminator
            # Select a random batch of note sequences
            idx = np.random.randint(0, X_train.shape[0], batch_size)
            real_seqs = X_train[idx]

            #noise = np.random.choice(range(484), (batch_size, self.latent_dim))
            #noise = (noise-242)/242
            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))
            noise = np.reshape(noise,(batch_size,self.latent_dim,1))

            # Generate a batch of new note sequences
            gen_seqs = self.generator.predict(noise)

            # Train the discriminator
            d_loss_real = self.discriminator.train_on_batch(real_seqs, real)
            d_loss_fake = self.discriminator.train_on_batch(gen_seqs, fake)
            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)


            #  Training the Generator
            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))

            # Train the generator (to have the discriminator label samples as real)
            g_loss = self.combined.train_on_batch(noise, real)

            # Print the progress and save into loss lists
            if epoch % sample_interval == 0:
              print ("%d [D loss: %f, acc.: %.2f%%] [G loss: %f]" % (epoch, d_loss[0], 100*d_loss[1], g_loss))
              self.disc_loss.append(d_loss[0])
              self.gen_loss.append(g_loss)
        self.generator.save_weights('/content/gdrive/My Drive/Classical-Piano-Composer/generator1_'+str(epochs)+'.hdf5')
        self.discriminator.save_weights('/content/gdrive/My Drive/Classical-Piano-Composer/discriminator1_'+str(epochs)+'.hdf5')
#         self.generate(notes)
        self.plot_loss()
        
    def generate(self, input_notes):
        self.generator.load_weights('/content/gdrive/My Drive/Classical-Piano-Composer/generator_3000.hdf5')
        self.discriminator.load_weights('/content/gdrive/My Drive/Classical-Piano-Composer/discriminator_3000.hdf5')
        # Get pitch names and store in a dictionary
        notes = input_notes
        pitchnames = sorted(set(item for item in notes))
        int_to_note = dict((number, note) for number, note in enumerate(pitchnames))
        print(len(int_to_note))
        # Use random noise to generate sequences
        noise = np.random.normal(0, 1, (1, self.latent_dim))
        predictions = self.generator.predict(noise)
        print(predictions)
        length = len(int_to_note)-1
        pred_notes = [x*length//2+length//2 for x in predictions[0]]
        pred_notes = [int_to_note[int(x)] for x in pred_notes]
        
        print(pred_notes)
        create_midi(pred_notes, '/content/gdrive/My Drive/Classical-Piano-Composer/gan_final_1',147)
        
    def plot_loss(self):
        plt.plot(self.disc_loss, c='red')
        plt.plot(self.gen_loss, c='blue')
        plt.title("GAN Loss per Epoch")
        plt.legend(['Discriminator', 'Generator'])
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.savefig('GAN_Loss_per_Epoch_final.png', transparent=True)
        plt.close()


if __name__ == '__main__':
	gan = GAN(rows=100)    
	notes = get_notes()
	gan.generate(notes)